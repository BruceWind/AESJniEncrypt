{
    "sourceFile": "README.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 56,
            "patches": [
                {
                    "date": 1664273019174,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1664273028344,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n [中文](https://github.com/BruceWind/AESJniEncrypt/blob/master/README_zh.md)\n \n \n # Reach high security with libsodium in Android\n-- [x] I have no longer supported ~~AES algorithms~~. Still need it, you can check out tag: [v2.2](https://github.com/BruceWind/AESJniEncrypt/releases/tag/v2.2).\n+- [x] I have no longer supported ~~AES algorithms~~. Still needing it, you could check out tag: [v2.2](https://github.com/BruceWind/AESJniEncrypt/releases/tag/v2.2).\n - [x] Use **CHACHA20** instead of **AES**. I have to mention that TLS1.3 use **CHACHA20** on mobile device too. It is high-performance for ARM architecture.\n - [x] Hide native function in JniOnload\n - [x] Use signature verification to avoid being packaged again (It is prevents that hacker call your jni method directly.)\n - [x] ~~key exists in the symbol table, and hides the character table~~. This method has been deprecated due to [discard reason issues5](https://github.com/weizongwei5/AESJniEncrypt/issues/5)\n"
                },
                {
                    "date": 1664273051750,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n [中文](https://github.com/BruceWind/AESJniEncrypt/blob/master/README_zh.md)\n \n \n # Reach high security with libsodium in Android\n-- [x] I have no longer supported ~~AES algorithms~~. Still needing it, you could check out tag: [v2.2](https://github.com/BruceWind/AESJniEncrypt/releases/tag/v2.2).\n+- [x] \n - [x] Use **CHACHA20** instead of **AES**. I have to mention that TLS1.3 use **CHACHA20** on mobile device too. It is high-performance for ARM architecture.\n - [x] Hide native function in JniOnload\n - [x] Use signature verification to avoid being packaged again (It is prevents that hacker call your jni method directly.)\n - [x] ~~key exists in the symbol table, and hides the character table~~. This method has been deprecated due to [discard reason issues5](https://github.com/weizongwei5/AESJniEncrypt/issues/5)\n"
                },
                {
                    "date": 1664273057031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,11 @@\n [中文](https://github.com/BruceWind/AESJniEncrypt/blob/master/README_zh.md)\n \n \n # Reach high security with libsodium in Android\n+\n+I have no longer supported ~~AES algorithms~~. Still needing it, you can check out tag: [v2.2](https://github.com/BruceWind/AESJniEncrypt/releases/tag/v2.2).\n+\n - [x] \n - [x] Use **CHACHA20** instead of **AES**. I have to mention that TLS1.3 use **CHACHA20** on mobile device too. It is high-performance for ARM architecture.\n - [x] Hide native function in JniOnload\n - [x] Use signature verification to avoid being packaged again (It is prevents that hacker call your jni method directly.)\n"
                },
                {
                    "date": 1664273087510,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,12 +6,11 @@\n # Reach high security with libsodium in Android\n \n I have no longer supported ~~AES algorithms~~. Still needing it, you can check out tag: [v2.2](https://github.com/BruceWind/AESJniEncrypt/releases/tag/v2.2).\n \n-- [x] \n - [x] Use **CHACHA20** instead of **AES**. I have to mention that TLS1.3 use **CHACHA20** on mobile device too. It is high-performance for ARM architecture.\n - [x] Hide native function in JniOnload\n-- [x] Use signature verification to avoid being packaged again (It is prevents that hacker call your jni method directly.)\n+- [x] Use signature verification to avoid second packaged again (It is prevents that hacker call your jni method directly.)\n - [x] ~~key exists in the symbol table, and hides the character table~~. This method has been deprecated due to [discard reason issues5](https://github.com/weizongwei5/AESJniEncrypt/issues/5)\n - [x] Get the key from a complex function, to hide the key, current function is a simple solution. (Complex solution: divide the Key into several pieces, store them in different C files, and finally splicing them together. This function should be complicated to write and increase the decompiling difficulty.)\n \n - [x] Use \"obfuscator\" to confuse C code, [how to  deobfuscate it?](https://blog.quarkslab.com/deobfuscation-recovering-an-ollvm-protected-program.html)\n"
                },
                {
                    "date": 1664273093580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n I have no longer supported ~~AES algorithms~~. Still needing it, you can check out tag: [v2.2](https://github.com/BruceWind/AESJniEncrypt/releases/tag/v2.2).\n \n - [x] Use **CHACHA20** instead of **AES**. I have to mention that TLS1.3 use **CHACHA20** on mobile device too. It is high-performance for ARM architecture.\n - [x] Hide native function in JniOnload\n-- [x] Use signature verification to avoid second packaged again (It is prevents that hacker call your jni method directly.)\n+- [x] Use signature verification to avoid second-packaged. (It is prevents that hacker call your jni method directly.)\n - [x] ~~key exists in the symbol table, and hides the character table~~. This method has been deprecated due to [discard reason issues5](https://github.com/weizongwei5/AESJniEncrypt/issues/5)\n - [x] Get the key from a complex function, to hide the key, current function is a simple solution. (Complex solution: divide the Key into several pieces, store them in different C files, and finally splicing them together. This function should be complicated to write and increase the decompiling difficulty.)\n \n - [x] Use \"obfuscator\" to confuse C code, [how to  deobfuscate it?](https://blog.quarkslab.com/deobfuscation-recovering-an-ollvm-protected-program.html)\n"
                },
                {
                    "date": 1664273112621,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n \n - [x] Use **CHACHA20** instead of **AES**. I have to mention that TLS1.3 use **CHACHA20** on mobile device too. It is high-performance for ARM architecture.\n - [x] Hide native function in JniOnload\n - [x] Use signature verification to avoid second-packaged. (It is prevents that hacker call your jni method directly.)\n-- [x] ~~key exists in the symbol table, and hides the character table~~. This method has been deprecated due to [discard reason issues5](https://github.com/weizongwei5/AESJniEncrypt/issues/5)\n+- [x] ~~key exists in the symbol table, and hides the character table~~. This approch has been deprecated due to [discard reason issues5](https://github.com/weizongwei5/AESJniEncrypt/issues/5)\n - [x] Get the key from a complex function, to hide the key, current function is a simple solution. (Complex solution: divide the Key into several pieces, store them in different C files, and finally splicing them together. This function should be complicated to write and increase the decompiling difficulty.)\n \n - [x] Use \"obfuscator\" to confuse C code, [how to  deobfuscate it?](https://blog.quarkslab.com/deobfuscation-recovering-an-ollvm-protected-program.html)\n - [x] Supporting x86 of obfucation. A link at the bottom is tutorial for configuring obfucator.\n"
                },
                {
                    "date": 1664273128452,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n \n - [x] Use **CHACHA20** instead of **AES**. I have to mention that TLS1.3 use **CHACHA20** on mobile device too. It is high-performance for ARM architecture.\n - [x] Hide native function in JniOnload\n - [x] Use signature verification to avoid second-packaged. (It is prevents that hacker call your jni method directly.)\n-- [x] ~~key exists in the symbol table, and hides the character table~~. This approch has been deprecated due to [discard reason issues5](https://github.com/weizongwei5/AESJniEncrypt/issues/5)\n+- [x] ~~key exists in the symbol table, and hides the character table~~. This approach had been deprecated due to [discard reason issues5](https://github.com/weizongwei5/AESJniEncrypt/issues/5)\n - [x] Get the key from a complex function, to hide the key, current function is a simple solution. (Complex solution: divide the Key into several pieces, store them in different C files, and finally splicing them together. This function should be complicated to write and increase the decompiling difficulty.)\n \n - [x] Use \"obfuscator\" to confuse C code, [how to  deobfuscate it?](https://blog.quarkslab.com/deobfuscation-recovering-an-ollvm-protected-program.html)\n - [x] Supporting x86 of obfucation. A link at the bottom is tutorial for configuring obfucator.\n"
                },
                {
                    "date": 1664273135579,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n \n - [x] Use **CHACHA20** instead of **AES**. I have to mention that TLS1.3 use **CHACHA20** on mobile device too. It is high-performance for ARM architecture.\n - [x] Hide native function in JniOnload\n - [x] Use signature verification to avoid second-packaged. (It is prevents that hacker call your jni method directly.)\n-- [x] ~~key exists in the symbol table, and hides the character table~~. This approach had been deprecated due to [discard reason issues5](https://github.com/weizongwei5/AESJniEncrypt/issues/5)\n+- [x] ~~key exists in the symbol table, and hides the character table~~. This approach has been deprecated due to [discard reason issues5](https://github.com/weizongwei5/AESJniEncrypt/issues/5)\n - [x] Get the key from a complex function, to hide the key, current function is a simple solution. (Complex solution: divide the Key into several pieces, store them in different C files, and finally splicing them together. This function should be complicated to write and increase the decompiling difficulty.)\n \n - [x] Use \"obfuscator\" to confuse C code, [how to  deobfuscate it?](https://blog.quarkslab.com/deobfuscation-recovering-an-ollvm-protected-program.html)\n - [x] Supporting x86 of obfucation. A link at the bottom is tutorial for configuring obfucator.\n"
                },
                {
                    "date": 1664273148040,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n - [x] Use **CHACHA20** instead of **AES**. I have to mention that TLS1.3 use **CHACHA20** on mobile device too. It is high-performance for ARM architecture.\n - [x] Hide native function in JniOnload\n - [x] Use signature verification to avoid second-packaged. (It is prevents that hacker call your jni method directly.)\n - [x] ~~key exists in the symbol table, and hides the character table~~. This approach has been deprecated due to [discard reason issues5](https://github.com/weizongwei5/AESJniEncrypt/issues/5)\n-- [x] Get the key from a complex function, to hide the key, current function is a simple solution. (Complex solution: divide the Key into several pieces, store them in different C files, and finally splicing them together. This function should be complicated to write and increase the decompiling difficulty.)\n+- [x] Aqui the key from a complex function, to hide the key, current function is a simple solution. (Complex solution: divide the Key into several pieces, store them in different C files, and finally splicing them together. This function should be complicated to write and increase the decompiling difficulty.)\n \n - [x] Use \"obfuscator\" to confuse C code, [how to  deobfuscate it?](https://blog.quarkslab.com/deobfuscation-recovering-an-ollvm-protected-program.html)\n - [x] Supporting x86 of obfucation. A link at the bottom is tutorial for configuring obfucator.\n - [x] Anti-debugging. Currently, I put a simple solution into code but there are complicated and sophisticated solutions.\n"
                },
                {
                    "date": 1664273212811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n - [x] Use **CHACHA20** instead of **AES**. I have to mention that TLS1.3 use **CHACHA20** on mobile device too. It is high-performance for ARM architecture.\n - [x] Hide native function in JniOnload\n - [x] Use signature verification to avoid second-packaged. (It is prevents that hacker call your jni method directly.)\n - [x] ~~key exists in the symbol table, and hides the character table~~. This approach has been deprecated due to [discard reason issues5](https://github.com/weizongwei5/AESJniEncrypt/issues/5)\n-- [x] Aqui the key from a complex function, to hide the key, current function is a simple solution. (Complex solution: divide the Key into several pieces, store them in different C files, and finally splicing them together. This function should be complicated to write and increase the decompiling difficulty.)\n+- [x] Obtain the key from a complex function, to hide the key, current function is a simple solution. (Complex solution: divide the Key into several pieces, store them in different C files, and finally splicing them together. This function should be complicated to write and increase the decompiling difficulty.)\n \n - [x] Use \"obfuscator\" to confuse C code, [how to  deobfuscate it?](https://blog.quarkslab.com/deobfuscation-recovering-an-ollvm-protected-program.html)\n - [x] Supporting x86 of obfucation. A link at the bottom is tutorial for configuring obfucator.\n - [x] Anti-debugging. Currently, I put a simple solution into code but there are complicated and sophisticated solutions.\n"
                },
                {
                    "date": 1664273225745,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n - [x] Use **CHACHA20** instead of **AES**. I have to mention that TLS1.3 use **CHACHA20** on mobile device too. It is high-performance for ARM architecture.\n - [x] Hide native function in JniOnload\n - [x] Use signature verification to avoid second-packaged. (It is prevents that hacker call your jni method directly.)\n - [x] ~~key exists in the symbol table, and hides the character table~~. This approach has been deprecated due to [discard reason issues5](https://github.com/weizongwei5/AESJniEncrypt/issues/5)\n-- [x] Obtain the key from a complex function, to hide the key, current function is a simple solution. (Complex solution: divide the Key into several pieces, store them in different C files, and finally splicing them together. This function should be complicated to write and increase the decompiling difficulty.)\n+- [x] Obtain the key from a complex function, to hide the key, currently function is a simple solution. (Complex solution: divide the Key into several pieces, store them in different C files, and finally splicing them together. This function should be complicated to write and increase the decompiling difficulty.)\n \n - [x] Use \"obfuscator\" to confuse C code, [how to  deobfuscate it?](https://blog.quarkslab.com/deobfuscation-recovering-an-ollvm-protected-program.html)\n - [x] Supporting x86 of obfucation. A link at the bottom is tutorial for configuring obfucator.\n - [x] Anti-debugging. Currently, I put a simple solution into code but there are complicated and sophisticated solutions.\n"
                },
                {
                    "date": 1664273311310,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,15 +10,15 @@\n - [x] Use **CHACHA20** instead of **AES**. I have to mention that TLS1.3 use **CHACHA20** on mobile device too. It is high-performance for ARM architecture.\n - [x] Hide native function in JniOnload\n - [x] Use signature verification to avoid second-packaged. (It is prevents that hacker call your jni method directly.)\n - [x] ~~key exists in the symbol table, and hides the character table~~. This approach has been deprecated due to [discard reason issues5](https://github.com/weizongwei5/AESJniEncrypt/issues/5)\n-- [x] Obtain the key from a complex function, to hide the key, currently function is a simple solution. (Complex solution: divide the Key into several pieces, store them in different C files, and finally splicing them together. This function should be complicated to write and increase the decompiling difficulty.)\n+- [x] Obtain the key from a complex function, to hide the key, currently the function is a simple solution. (Complex solution: divide the Key into several pieces, store them in different C files, and finally splicing them together. This function should be complicated to write and increase the decompiling difficulty.)\n \n - [x] Use \"obfuscator\" to confuse C code, [how to  deobfuscate it?](https://blog.quarkslab.com/deobfuscation-recovering-an-ollvm-protected-program.html)\n - [x] Supporting x86 of obfucation. A link at the bottom is tutorial for configuring obfucator.\n - [x] Anti-debugging. Currently, I put a simple solution into code but there are complicated and sophisticated solutions.\n       I recommand determining whether it is traced in every encryption and decryption. You can add other complicated algorithm in your fork.\n-- [x] Detecting device is emulator in runtime : That feature comes from my another repo [Check_Emulator_In_NDK](https://github.com/Scavenges/Check_Emulator_In_NDK)\n+- [x] Detecting device is emulator during runtime : That feature comes from my another repo [Check_Emulator_In_NDK](https://github.com/Scavenges/Check_Emulator_In_NDK)\n - [ ] TODO: Prevent SO file injecting from hacker.\n \n \n \n"
                },
                {
                    "date": 1664273317146,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n - [x] Use \"obfuscator\" to confuse C code, [how to  deobfuscate it?](https://blog.quarkslab.com/deobfuscation-recovering-an-ollvm-protected-program.html)\n - [x] Supporting x86 of obfucation. A link at the bottom is tutorial for configuring obfucator.\n - [x] Anti-debugging. Currently, I put a simple solution into code but there are complicated and sophisticated solutions.\n       I recommand determining whether it is traced in every encryption and decryption. You can add other complicated algorithm in your fork.\n-- [x] Detecting device is emulator during runtime : That feature comes from my another repo [Check_Emulator_In_NDK](https://github.com/Scavenges/Check_Emulator_In_NDK)\n+- [x] Detecting device is emulator during runtime. That feature comes from my another repo [Check_Emulator_In_NDK](https://github.com/Scavenges/Check_Emulator_In_NDK)\n - [ ] TODO: Prevent SO file injecting from hacker.\n \n \n \n"
                },
                {
                    "date": 1664273638055,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n \n \n # Reach high security with libsodium in Android\n \n-I have no longer supported ~~AES algorithms~~. Still needing it, you can check out tag: [v2.2](https://github.com/BruceWind/AESJniEncrypt/releases/tag/v2.2).\n+> I have no longer supported ~~AES algorithms~~. Still needing it, you can check out tag: [v2.2](https://github.com/BruceWind/AESJniEncrypt/releases/tag/v2.2).\n \n - [x] Use **CHACHA20** instead of **AES**. I have to mention that TLS1.3 use **CHACHA20** on mobile device too. It is high-performance for ARM architecture.\n - [x] Hide native function in JniOnload\n - [x] Use signature verification to avoid second-packaged. (It is prevents that hacker call your jni method directly.)\n@@ -16,9 +16,9 @@\n - [x] Use \"obfuscator\" to confuse C code, [how to  deobfuscate it?](https://blog.quarkslab.com/deobfuscation-recovering-an-ollvm-protected-program.html)\n - [x] Supporting x86 of obfucation. A link at the bottom is tutorial for configuring obfucator.\n - [x] Anti-debugging. Currently, I put a simple solution into code but there are complicated and sophisticated solutions.\n       I recommand determining whether it is traced in every encryption and decryption. You can add other complicated algorithm in your fork.\n-- [x] Detecting device is emulator during runtime. That feature comes from my another repo [Check_Emulator_In_NDK](https://github.com/Scavenges/Check_Emulator_In_NDK)\n+- [x] Detecting device is emulator during runtime. This feature comes from my another repo [Check_Emulator_In_NDK](https://github.com/Scavenges/Check_Emulator_In_NDK)\n - [ ] TODO: Prevent SO file injecting from hacker.\n \n \n \n"
                },
                {
                    "date": 1664273924471,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n 1. preparation：\n \n run the shell : `aesjni/src/main/jni/build_libsodium_for_all_android_abi.sh`\n \n-2. click run app from Android Studio to look at logcat.\n+2. click run app from Android Studio to look at logcat，some result of execution will be there\n \n </details>\n \n \n"
                },
                {
                    "date": 1664273945740,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n 1. preparation：\n \n run the shell : `aesjni/src/main/jni/build_libsodium_for_all_android_abi.sh`\n \n-2. click run app from Android Studio to look at logcat，some result of execution will be there\n+2. click run app from adb to look at logcat，some result of execution will be there\n \n </details>\n \n \n"
                },
                {
                    "date": 1664276057696,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n \n \n 1. preparation：\n \n-run the shell : `aesjni/src/main/jni/build_libsodium_for_all_android_abi.sh`\n+run the shell : `$ cd aesjni/src/main/jni/ aesjni/src/main/jni/build_libsodium_for_all_android_abi.sh`\n \n 2. click run app from adb to look at logcat，some result of execution will be there\n \n </details>\n"
                },
                {
                    "date": 1664276211127,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n \n \n 1. preparation：\n \n-run the shell : `$ cd aesjni/src/main/jni/ aesjni/src/main/jni/build_libsodium_for_all_android_abi.sh`\n+run the shell : `cd aesjni/src/main/jni/ && aesjni/src/main/jni/build_libsodium_for_all_android_abi.sh`\n \n 2. click run app from adb to look at logcat，some result of execution will be there\n \n </details>\n@@ -42,8 +42,10 @@\n a. generating a chacha20 key: \n     \n run `test_in_exexutaing.sh`, and look at logcat. It will generate ***key*** and ***nonce***. You can paste it into **JNIEntry.c**.\n \n+\n+\n b. Set **ndk.dir** in local.properties. Some versions of NDK I have not tested. Maybe you will encounter build errors from that.\n \n c. As you integrating it into the project, please modify class names and method names, don't expose the name of encryption algorithm, modify the [C function](https://github.com/BruceWind/AESJniEncrypt/blob/master/aesjni/src/main/jni/JNIEncrypt.c#L56-L70) of key storage from my code.\n \n"
                },
                {
                    "date": 1664276219003,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,11 +41,11 @@\n <summary>click to expand.</summary>\n a. generating a chacha20 key: \n     \n run `test_in_exexutaing.sh`, and look at logcat. It will generate ***key*** and ***nonce***. You can paste it into **JNIEntry.c**.\n+When you run the \n \n \n-\n b. Set **ndk.dir** in local.properties. Some versions of NDK I have not tested. Maybe you will encounter build errors from that.\n \n c. As you integrating it into the project, please modify class names and method names, don't expose the name of encryption algorithm, modify the [C function](https://github.com/BruceWind/AESJniEncrypt/blob/master/aesjni/src/main/jni/JNIEncrypt.c#L56-L70) of key storage from my code.\n \n"
                },
                {
                    "date": 1664276225007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,8 +30,11 @@\n 1. preparation：\n \n run the shell : `cd aesjni/src/main/jni/ && aesjni/src/main/jni/build_libsodium_for_all_android_abi.sh`\n \n+configure: error: C compiler cannot create executables\n+See `config.log' for more details\n+\n 2. click run app from adb to look at logcat，some result of execution will be there\n \n </details>\n \n"
                },
                {
                    "date": 1664276246362,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n \n 1. preparation：\n \n run the shell : `cd aesjni/src/main/jni/ && aesjni/src/main/jni/build_libsodium_for_all_android_abi.sh`\n-\n+When you run the shell, some error you may got\n configure: error: C compiler cannot create executables\n See `config.log' for more details\n \n 2. click run app from adb to look at logcat，some result of execution will be there\n@@ -44,11 +44,11 @@\n <summary>click to expand.</summary>\n a. generating a chacha20 key: \n     \n run `test_in_exexutaing.sh`, and look at logcat. It will generate ***key*** and ***nonce***. You can paste it into **JNIEntry.c**.\n-When you run the \n \n \n+\n b. Set **ndk.dir** in local.properties. Some versions of NDK I have not tested. Maybe you will encounter build errors from that.\n \n c. As you integrating it into the project, please modify class names and method names, don't expose the name of encryption algorithm, modify the [C function](https://github.com/BruceWind/AESJniEncrypt/blob/master/aesjni/src/main/jni/JNIEncrypt.c#L56-L70) of key storage from my code.\n \n"
                },
                {
                    "date": 1664276252465,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,11 @@\n \n 1. preparation：\n \n run the shell : `cd aesjni/src/main/jni/ && aesjni/src/main/jni/build_libsodium_for_all_android_abi.sh`\n-When you run the shell, some error you may got\n+When you run the shell, some error you may got:\n+\n+```\n configure: error: C compiler cannot create executables\n See `config.log' for more details\n \n 2. click run app from adb to look at logcat，some result of execution will be there\n"
                },
                {
                    "date": 1664276257844,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,12 +31,15 @@\n \n run the shell : `cd aesjni/src/main/jni/ && aesjni/src/main/jni/build_libsodium_for_all_android_abi.sh`\n When you run the shell, some error you may got:\n \n+\n ```\n configure: error: C compiler cannot create executables\n See `config.log' for more details\n+``` \n \n+\n 2. click run app from adb to look at logcat，some result of execution will be there\n \n </details>\n \n"
                },
                {
                    "date": 1664276271734,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n \n \n ```\n configure: error: C compiler cannot create executables\n-See `config.log' for more details\n+See `config.log` for more details\n ``` \n \n \n 2. click run app from adb to look at logcat，some result of execution will be there\n"
                },
                {
                    "date": 1664276298053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,8 +38,10 @@\n See `config.log` for more details\n ``` \n \n \n+If \n+\n 2. click run app from adb to look at logcat，some result of execution will be there\n \n </details>\n \n"
                },
                {
                    "date": 1664276304498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n See `config.log` for more details\n ``` \n \n \n-If \n+If the shell run \n \n 2. click run app from adb to look at logcat，some result of execution will be there\n \n </details>\n"
                },
                {
                    "date": 1664276323320,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n See `config.log` for more details\n ``` \n \n \n-If the shell run \n+If the shell run well, aesjni/src/main/jni/\n \n 2. click run app from adb to look at logcat，some result of execution will be there\n \n </details>\n"
                },
                {
                    "date": 1664276337031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n See `config.log` for more details\n ``` \n \n \n-If the shell run well, aesjni/src/main/jni/\n+If the shell run well, some so `aesjni/src/main/jni/`\n \n 2. click run app from adb to look at logcat，some result of execution will be there\n \n </details>\n"
                },
                {
                    "date": 1664276343548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n See `config.log` for more details\n ``` \n \n \n-If the shell run well, some so `aesjni/src/main/jni/`\n+If the shell run well, some `.a`  `aesjni/src/main/jni/`\n \n 2. click run app from adb to look at logcat，some result of execution will be there\n \n </details>\n"
                },
                {
                    "date": 1664276355165,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n See `config.log` for more details\n ``` \n \n \n-If the shell run well, some `.a`  `aesjni/src/main/jni/`\n+If the shell run well, some `.a` & `.so` files will be copy into `aesjni/src/main/jni/`.\n \n 2. click run app from adb to look at logcat，some result of execution will be there\n \n </details>\n"
                },
                {
                    "date": 1664276401921,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n See `config.log` for more details\n ``` \n \n \n-If the shell run well, some `.a` & `.so` files will be copy into `aesjni/src/main/jni/`.\n+If the shell run well, some `.a` & `.so` files will be copy into `aesjni/src/main/jni/sodium_include`.\n \n 2. click run app from adb to look at logcat，some result of execution will be there\n \n </details>\n"
                },
                {
                    "date": 1664276409528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n See `config.log` for more details\n ``` \n \n \n-If the shell run well, some `.a` & `.so` files will be copy into `aesjni/src/main/jni/sodium_include`.\n+If the shell run well, a lots `.a` & `.so` files will be copy into `aesjni/src/main/jni/sodium_include/`.\n \n 2. click run app from adb to look at logcat，some result of execution will be there\n \n </details>\n"
                },
                {
                    "date": 1664276418043,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n See `config.log` for more details\n ``` \n \n \n-If the shell run well, a lots `.a` & `.so` files will be copy into `aesjni/src/main/jni/sodium_include/`.\n+If the shell run well, a lots of files such as  will be copy into `aesjni/src/main/jni/sodium_include/`.\n \n 2. click run app from adb to look at logcat，some result of execution will be there\n \n </details>\n"
                },
                {
                    "date": 1664276424924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n See `config.log` for more details\n ``` \n \n \n-If the shell run well, a lots of files such as  will be copy into `aesjni/src/main/jni/sodium_include/`.\n+If the shell run well, a lots of files, such as  `.a` & `.so` will be copy into `aesjni/src/main/jni/sodium_include/`.\n \n 2. click run app from adb to look at logcat，some result of execution will be there\n \n </details>\n"
                },
                {
                    "date": 1664276447278,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,14 +33,16 @@\n When you run the shell, some error you may got:\n \n \n ```\n+env: python: No such file or directory\n+........\n configure: error: C compiler cannot create executables\n See `config.log` for more details\n ``` \n \n \n-If the shell run well, a lots of files, such as  `.a` & `.so` will be copy into `aesjni/src/main/jni/sodium_include/`.\n+If the shell run well, a lots of files, such as  `.a` & `.so`, will be copy into `aesjni/src/main/jni/sodium_include/`.\n \n 2. click run app from adb to look at logcat，some result of execution will be there\n \n </details>\n"
                },
                {
                    "date": 1664276586631,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,8 @@\n \n run the shell : `cd aesjni/src/main/jni/ && aesjni/src/main/jni/build_libsodium_for_all_android_abi.sh`\n When you run the shell, some error you may got:\n \n-\n ```\n env: python: No such file or directory\n ........\n configure: error: C compiler cannot create executables\n"
                },
                {
                    "date": 1664276656304,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,8 +40,9 @@\n ``` \n \n \n If the shell run well, a lots of files, such as  `.a` & `.so`, will be copy into `aesjni/src/main/jni/sodium_include/`.\n+Also you w\n \n 2. click run app from adb to look at logcat，some result of execution will be there\n \n </details>\n"
                },
                {
                    "date": 1664276662872,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n ``` \n \n \n If the shell run well, a lots of files, such as  `.a` & `.so`, will be copy into `aesjni/src/main/jni/sodium_include/`.\n-Also you w\n+Also you would s\n \n 2. click run app from adb to look at logcat，some result of execution will be there\n \n </details>\n"
                },
                {
                    "date": 1664276673051,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n ``` \n \n \n If the shell run well, a lots of files, such as  `.a` & `.so`, will be copy into `aesjni/src/main/jni/sodium_include/`.\n-Also you would s\n+Also you would saw `All of static libs has been moved into ` at terminal.\n \n 2. click run app from adb to look at logcat，some result of execution will be there\n \n </details>\n"
                },
                {
                    "date": 1664276687149,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,17 +32,17 @@\n run the shell : `cd aesjni/src/main/jni/ && aesjni/src/main/jni/build_libsodium_for_all_android_abi.sh`\n When you run the shell, some error you may got:\n \n ```\n-env: python: No such file or directory\n+\n ........\n configure: error: C compiler cannot create executables\n See `config.log` for more details\n ``` \n \n \n If the shell run well, a lots of files, such as  `.a` & `.so`, will be copy into `aesjni/src/main/jni/sodium_include/`.\n-Also you would saw `All of static libs has been moved into ` at terminal.\n+Also you would saw `All of static libs has been moved into ......` at terminal.\n \n 2. click run app from adb to look at logcat，some result of execution will be there\n \n </details>\n"
                },
                {
                    "date": 1664276699855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,11 @@\n \n 1. preparation：\n \n run the shell : `cd aesjni/src/main/jni/ && aesjni/src/main/jni/build_libsodium_for_all_android_abi.sh`\n-When you run the shell, some error you may got:\n+When you run the shell, some error you may got some error like this:\n+`env: python: No such file or directory` or `env: bash: No such file or directory`\n+```\n \n ```\n \n ........\n"
                },
                {
                    "date": 1664276707635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n 1. preparation：\n \n run the shell : `cd aesjni/src/main/jni/ && aesjni/src/main/jni/build_libsodium_for_all_android_abi.sh`\n When you run the shell, some error you may got some error like this:\n-`env: python: No such file or directory` or `env: bash: No such file or directory`\n+`env: python: No such file or directory` or `See `config.log` for more details`\n ```\n \n ```\n \n"
                },
                {
                    "date": 1664276717155,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n 1. preparation：\n \n run the shell : `cd aesjni/src/main/jni/ && aesjni/src/main/jni/build_libsodium_for_all_android_abi.sh`\n When you run the shell, some error you may got some error like this:\n-`env: python: No such file or directory` or `See `config.log` for more details`\n+`env: python: No such file or directory` or `See `config.log` for more details` or others.\n ```\n \n ```\n \n"
                },
                {
                    "date": 1664276722707,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,12 +31,10 @@\n \n run the shell : `cd aesjni/src/main/jni/ && aesjni/src/main/jni/build_libsodium_for_all_android_abi.sh`\n When you run the shell, some error you may got some error like this:\n `env: python: No such file or directory` or `See `config.log` for more details` or others.\n-```\n+Pls,\n \n-```\n-\n ........\n configure: error: C compiler cannot create executables\n See `config.log` for more details\n ``` \n@@ -44,9 +42,9 @@\n \n If the shell run well, a lots of files, such as  `.a` & `.so`, will be copy into `aesjni/src/main/jni/sodium_include/`.\n Also you would saw `All of static libs has been moved into ......` at terminal.\n \n-2. click run app from adb to look at logcat，some result of execution will be there\n+1. click run app from adb to look at logcat，some result of execution will be there\n \n </details>\n \n \n"
                },
                {
                    "date": 1664276728237,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n \n run the shell : `cd aesjni/src/main/jni/ && aesjni/src/main/jni/build_libsodium_for_all_android_abi.sh`\n When you run the shell, some error you may got some error like this:\n `env: python: No such file or directory` or `See `config.log` for more details` or others.\n-Pls,\n+Pls, take \n \n ........\n configure: error: C compiler cannot create executables\n See `config.log` for more details\n"
                },
                {
                    "date": 1664276738642,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n \n run the shell : `cd aesjni/src/main/jni/ && aesjni/src/main/jni/build_libsodium_for_all_android_abi.sh`\n When you run the shell, some error you may got some error like this:\n `env: python: No such file or directory` or `See `config.log` for more details` or others.\n-Pls, take \n+Pls, take time to solve it. \n \n ........\n configure: error: C compiler cannot create executables\n See `config.log` for more details\n"
                },
                {
                    "date": 1664276745658,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n \n run the shell : `cd aesjni/src/main/jni/ && aesjni/src/main/jni/build_libsodium_for_all_android_abi.sh`\n When you run the shell, some error you may got some error like this:\n `env: python: No such file or directory` or `See `config.log` for more details` or others.\n-Pls, take time to solve it. \n+Pls, take time to solve it. re\n \n ........\n configure: error: C compiler cannot create executables\n See `config.log` for more details\n"
                },
                {
                    "date": 1664276760271,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,10 +30,10 @@\n 1. preparation：\n \n run the shell : `cd aesjni/src/main/jni/ && aesjni/src/main/jni/build_libsodium_for_all_android_abi.sh`\n When you run the shell, some error you may got some error like this:\n-`env: python: No such file or directory` or `See `config.log` for more details` or others.\n-Pls, take time to solve it. re\n+`env: python: No such file or directory` or `See config.log` for more details` or others.\n+Pls, take time to solve it. research in Google.\n \n ........\n configure: error: C compiler cannot create executables\n See `config.log` for more details\n"
                },
                {
                    "date": 1664276767519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n 1. preparation：\n \n run the shell : `cd aesjni/src/main/jni/ && aesjni/src/main/jni/build_libsodium_for_all_android_abi.sh`\n When you run the shell, some error you may got some error like this:\n-`env: python: No such file or directory` or `See config.log` for more details` or others.\n+`env: python: No such file or directory` or `See \"config.log\" for more details` or others.\n Pls, take time to solve it. research in Google.\n \n ........\n configure: error: C compiler cannot create executables\n"
                },
                {
                    "date": 1664276773255,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,17 +30,12 @@\n 1. preparation：\n \n run the shell : `cd aesjni/src/main/jni/ && aesjni/src/main/jni/build_libsodium_for_all_android_abi.sh`\n When you run the shell, some error you may got some error like this:\n-`env: python: No such file or directory` or `See \"config.log\" for more details` or others.\n+`env: python: No such file or directory` , `See \"config.log\" for more details` or others.\n Pls, take time to solve it. research in Google.\n \n-........\n-configure: error: C compiler cannot create executables\n-See `config.log` for more details\n-``` \n \n-\n If the shell run well, a lots of files, such as  `.a` & `.so`, will be copy into `aesjni/src/main/jni/sodium_include/`.\n Also you would saw `All of static libs has been moved into ......` at terminal.\n \n 1. click run app from adb to look at logcat，some result of execution will be there\n"
                },
                {
                    "date": 1664276778938,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,11 +31,11 @@\n \n run the shell : `cd aesjni/src/main/jni/ && aesjni/src/main/jni/build_libsodium_for_all_android_abi.sh`\n When you run the shell, some error you may got some error like this:\n `env: python: No such file or directory` , `See \"config.log\" for more details` or others.\n+\n Pls, take time to solve it. research in Google.\n \n-\n If the shell run well, a lots of files, such as  `.a` & `.so`, will be copy into `aesjni/src/main/jni/sodium_include/`.\n Also you would saw `All of static libs has been moved into ......` at terminal.\n \n 1. click run app from adb to look at logcat，some result of execution will be there\n"
                },
                {
                    "date": 1664276791185,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n run the shell : `cd aesjni/src/main/jni/ && aesjni/src/main/jni/build_libsodium_for_all_android_abi.sh`\n When you run the shell, some error you may got some error like this:\n `env: python: No such file or directory` , `See \"config.log\" for more details` or others.\n \n-Pls, take time to solve it. research in Google.\n+Pls, take time to solve it. research in Google. That is easy, \n \n If the shell run well, a lots of files, such as  `.a` & `.so`, will be copy into `aesjni/src/main/jni/sodium_include/`.\n Also you would saw `All of static libs has been moved into ......` at terminal.\n \n"
                },
                {
                    "date": 1664276803496,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n run the shell : `cd aesjni/src/main/jni/ && aesjni/src/main/jni/build_libsodium_for_all_android_abi.sh`\n When you run the shell, some error you may got some error like this:\n `env: python: No such file or directory` , `See \"config.log\" for more details` or others.\n \n-Pls, take time to solve it. research in Google. That is easy, \n+Pls, take time to solve it. research in Google. That is easy, some library\n \n If the shell run well, a lots of files, such as  `.a` & `.so`, will be copy into `aesjni/src/main/jni/sodium_include/`.\n Also you would saw `All of static libs has been moved into ......` at terminal.\n \n"
                },
                {
                    "date": 1664276809910,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n run the shell : `cd aesjni/src/main/jni/ && aesjni/src/main/jni/build_libsodium_for_all_android_abi.sh`\n When you run the shell, some error you may got some error like this:\n `env: python: No such file or directory` , `See \"config.log\" for more details` or others.\n \n-Pls, take time to solve it. research in Google. That is easy, some library\n+Pls, take time to solve it. research in Google. That is easy, some libraries you need to install.\n \n If the shell run well, a lots of files, such as  `.a` & `.so`, will be copy into `aesjni/src/main/jni/sodium_include/`.\n Also you would saw `All of static libs has been moved into ......` at terminal.\n \n"
                },
                {
                    "date": 1664276822009,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n run the shell : `cd aesjni/src/main/jni/ && aesjni/src/main/jni/build_libsodium_for_all_android_abi.sh`\n When you run the shell, some error you may got some error like this:\n `env: python: No such file or directory` , `See \"config.log\" for more details` or others.\n \n-Pls, take time to solve it. research in Google. That is easy, some libraries you need to install.\n+Pls, take time to solve it. research in Google. Ie is easy, some libraries you need to install.\n \n If the shell run well, a lots of files, such as  `.a` & `.so`, will be copy into `aesjni/src/main/jni/sodium_include/`.\n Also you would saw `All of static libs has been moved into ......` at terminal.\n \n"
                },
                {
                    "date": 1664276828048,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n run the shell : `cd aesjni/src/main/jni/ && aesjni/src/main/jni/build_libsodium_for_all_android_abi.sh`\n When you run the shell, some error you may got some error like this:\n `env: python: No such file or directory` , `See \"config.log\" for more details` or others.\n \n-Pls, take time to solve it. research in Google. Ie is easy, some libraries you need to install.\n+Pls, take time to solve it. research in Google. It is easy that some libraries you need to install.\n \n If the shell run well, a lots of files, such as  `.a` & `.so`, will be copy into `aesjni/src/main/jni/sodium_include/`.\n Also you would saw `All of static libs has been moved into ......` at terminal.\n \n"
                }
            ],
            "date": 1664273019174,
            "name": "Commit-0",
            "content": "[English](https://github.com/BruceWind/AESJniEncrypt/blob/master/README.md)\n\n[中文](https://github.com/BruceWind/AESJniEncrypt/blob/master/README_zh.md)\n\n\n# Reach high security with libsodium in Android\n- [x] I have no longer supported ~~AES algorithms~~. Still need it, you can check out tag: [v2.2](https://github.com/BruceWind/AESJniEncrypt/releases/tag/v2.2).\n- [x] Use **CHACHA20** instead of **AES**. I have to mention that TLS1.3 use **CHACHA20** on mobile device too. It is high-performance for ARM architecture.\n- [x] Hide native function in JniOnload\n- [x] Use signature verification to avoid being packaged again (It is prevents that hacker call your jni method directly.)\n- [x] ~~key exists in the symbol table, and hides the character table~~. This method has been deprecated due to [discard reason issues5](https://github.com/weizongwei5/AESJniEncrypt/issues/5)\n- [x] Get the key from a complex function, to hide the key, current function is a simple solution. (Complex solution: divide the Key into several pieces, store them in different C files, and finally splicing them together. This function should be complicated to write and increase the decompiling difficulty.)\n\n- [x] Use \"obfuscator\" to confuse C code, [how to  deobfuscate it?](https://blog.quarkslab.com/deobfuscation-recovering-an-ollvm-protected-program.html)\n- [x] Supporting x86 of obfucation. A link at the bottom is tutorial for configuring obfucator.\n- [x] Anti-debugging. Currently, I put a simple solution into code but there are complicated and sophisticated solutions.\n      I recommand determining whether it is traced in every encryption and decryption. You can add other complicated algorithm in your fork.\n- [x] Detecting device is emulator in runtime : That feature comes from my another repo [Check_Emulator_In_NDK](https://github.com/Scavenges/Check_Emulator_In_NDK)\n- [ ] TODO: Prevent SO file injecting from hacker.\n\n\n\n## build & run it.\n<details>\n<summary>click to expand.</summary>\n\n\n1. preparation：\n\nrun the shell : `aesjni/src/main/jni/build_libsodium_for_all_android_abi.sh`\n\n2. click run app from Android Studio to look at logcat.\n\n</details>\n\n\n## how to integrate it into my project?\n<details>\n<summary>click to expand.</summary>\na. generating a chacha20 key: \n    \nrun `test_in_exexutaing.sh`, and look at logcat. It will generate ***key*** and ***nonce***. You can paste it into **JNIEntry.c**.\n\nb. Set **ndk.dir** in local.properties. Some versions of NDK I have not tested. Maybe you will encounter build errors from that.\n\nc. As you integrating it into the project, please modify class names and method names, don't expose the name of encryption algorithm, modify the [C function](https://github.com/BruceWind/AESJniEncrypt/blob/master/aesjni/src/main/jni/JNIEncrypt.c#L56-L70) of key storage from my code.\n\nd. Generate and modify signatures.\n\nd.1. Generate keystore file(You shoul jump this step in case you already have keysotre.)\n\n```shell script\n# my generate record:\nmkdir keystore\ncd keystore/\nkeytool -genkey -alias client1 -keypass 123456 -keyalg RSA -keysize 1024 -validity 365 -storetype PKCS12 -keystore ./androidyuan.keystore\n```\n\nd.2. Modify `hash` of your keystore and `pkg-name` in [check_signature.h](https://github.com/BruceWind/AESJniEncrypt/blob/master/aesjni/src/main/jni/check_signature.h#L9_L11).\n\nAs you obtaining the hash,  you should use this medthod: [getSignature()](https://github.com/BruceWind/AESJniEncrypt/blob/519a4f16ee0a61b05f8dd41419e3fe61836ee5c7/aesjni/src/main/java/com/androidyuan/aesjni/SignatureTool.java#L26), \nto get.\n    \nPlease copy the **keystore hashcode** and **package name** into `check_signature.h`.\n      \n</details>\n\n### Remind: SO file will become bigger\n\n![unconfused so](https://github.com/weizongwei5/AESJniEncrypt/raw/master/img/unobfscator_debugapk.png)\n![confused so](https://github.com/weizongwei5/AESJniEncrypt/raw/master/img/obfscator_screen.png)\n\nSize of confused SO file may be three times the size of original SO file.\nIf the size bother you, you can disable obfscator-lvvm. It is unnecessary.\n\n### In addition, what I have to tell you:\nBecause you need to do signature verification, I can't provide **jcenter** dependencies, pls forgive me! \n\nEven though these code is very safe, I still against storing key in code. The key that shouldn't be constant shuold be termporary and generated. If you know how SSL works, you may think that asymmetric entription transfering the key is safest in the world.\nIf you dont know how SSL works, I recommend a blog from Cloudflare: [what-is-asymmetric-encryption](https://www.cloudflare.com/zh-cn/learning/ssl/what-is-asymmetric-encryption/)\n\n\nTo confuse native code, you need to modify the `externalNativeBuild` in the `aesjni/build.gradle` and configure the **Obfuscator-LLVM** under the NDK.\n\nThis is my NDK configuration obfuscator tutorial: [Obfuscator-LLVM-4.0-BUILD-NDK](https://github.com/weizongwei5/Obfuscator-LLVM-4.0-BUILD-NDK).\n\nIn another way, you can build it on docker.\nMaybe you think configurating Obfuscator-LLVM is really difficult. I recommend using docker : [github.com/nickdiego/docker-ollvm](https://github.com/nickdiego/docker-ollvm).\n\n\n[How do other languages ​​work together with encryption and decryption?](https://github.com/weizongwei5/AESJniEncrypt/issues/8)\n\nIf you got a crash, you can look into **FigureOutJNICrash.md** to find where code crash at.\n\n-------------------\n## Legal\nIf you live in China, you should take care of [checking apk signature](https://github.com/BruceWind/AESJniEncrypt/blob/master/aesjni/src/main/cpp/check_emulator.h#L15).\nIn this code, I use PackageManger that may be misunderstood to collect list of installed apps. \nYou should look at [工信部整治八项违规](http://www.miit.gov.cn/n1146295/n7281315/c7507241/part/7507297.docx).\n\n## Contributing\n\nIn case you would like to add information to this repository or suggest some ideas, please use one of the following options:\n\n- [Create an Issue](https://github.com/weizongwei5/AESJniEncrypt/issues/new).\n- Send me Pull Requests\n\n### Contributor\n\n[https://github.com/larry19840909](https://github.com/larry19840909)\n\n[https://github.com/zxp0505](https://github.com/zxp0505)\n\n[https://github.com/baoyongzhang](https://github.com/baoyongzhang)\n\n\n\n## Thanks\n\nLibsodium Algorithm from: https://github.com/jedisct1/libsodium\n\nNative code obfuscator: [obfuscation-o-llvm-ndk](https://fuzion24.github.io/android/obfuscation/ndk/llvm/o-llvm/2014/07/27/android-obfuscation-o-llvm-ndk)\n\n\n"
        }
    ]
}